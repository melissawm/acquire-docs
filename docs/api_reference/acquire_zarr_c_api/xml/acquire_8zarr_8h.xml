<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="acquire_8zarr_8h" kind="file" language="C++">
    <compoundname>acquire.zarr.h</compoundname>
    <includes refid="zarr_8types_8h" local="yes">zarr.types.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h</label>
        <link refid="acquire_8zarr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zarr.types.h</label>
        <link refid="zarr_8types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_zarr_stream_settings" prot="public">ZarrStreamSettings</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="acquire_8zarr_8h_1afa4fdb6226bd1eb0a565f275bec5cde1" prot="public" static="no">
        <type>struct ZarrStream_s</type>
        <definition>typedef struct ZarrStream_s ZarrStream</definition>
        <argsstring></argsstring>
        <name>ZarrStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="39" column="31" bodyfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="acquire_8zarr_8h_1abc5be8c7786118cc4ac3be6c083e0c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Zarr_get_api_version</definition>
        <argsstring>()</argsstring>
        <name>Zarr_get_api_version</name>
        <briefdescription>
<para>Get the version of the Zarr API. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Semver formatted version of the Zarr API. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="45" column="16" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="45" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1ac0a234f5f669d198eba7a2b6a4b16781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ZarrStatusCode</type>
        <definition>ZarrStatusCode Zarr_set_log_level</definition>
        <argsstring>(ZarrLogLevel level)</argsstring>
        <name>Zarr_set_log_level</name>
        <param>
          <type>ZarrLogLevel</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the log level for the Zarr API. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ZarrStatusCode_Success on success, or an error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="52" column="20" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="52" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1afc7914d0585829c89f7c9a15d5f13098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ZarrLogLevel</type>
        <definition>ZarrLogLevel Zarr_get_log_level</definition>
        <argsstring>()</argsstring>
        <name>Zarr_get_log_level</name>
        <briefdescription>
<para>Get the log level for the Zarr API. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The log level for the Zarr API. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="58" column="18" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="58" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1ad5a5e0fe9c333acef4d30100a77c6e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Zarr_get_status_message</definition>
        <argsstring>(ZarrStatusCode code)</argsstring>
        <name>Zarr_get_status_message</name>
        <param>
          <type>ZarrStatusCode</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get the message for the given status code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The status code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A human-readable status message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="65" column="16" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="65" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1a0638381542b36bbd78be9779d8274ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ZarrStatusCode</type>
        <definition>ZarrStatusCode ZarrStreamSettings_create_dimension_array</definition>
        <argsstring>(ZarrStreamSettings *settings, size_t dimension_count)</argsstring>
        <name>ZarrStreamSettings_create_dimension_array</name>
        <param>
          <type><ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref> *</type>
          <declname>settings</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dimension_count</declname>
        </param>
        <briefdescription>
<para>Allocate memory for the dimension array in the Zarr stream settings struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>The Zarr stream settings struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of dimensions in the dataset to allocate memory for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ZarrStatusCode_Success on success, or an error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="73" column="20" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="73" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1a71653feb9e5c5fb31787a078013d5327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ZarrStreamSettings_destroy_dimension_array</definition>
        <argsstring>(ZarrStreamSettings *settings)</argsstring>
        <name>ZarrStreamSettings_destroy_dimension_array</name>
        <param>
          <type><ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Free memory for the dimension array in the Zarr stream settings struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>The Zarr stream settings struct containing the dimension array to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="79" column="10" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="79" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1ab57d072062f9a8de3e261392ae0c6013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ZarrStream *</type>
        <definition>ZarrStream * ZarrStream_create</definition>
        <argsstring>(ZarrStreamSettings *settings)</argsstring>
        <name>ZarrStream_create</name>
        <param>
          <type><ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Create a Zarr stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>The settings for the Zarr stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the Zarr stream struct, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="86" column="16" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="86" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1ab8e0216303891a3ad15b2f90d109bd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ZarrStream_destroy</definition>
        <argsstring>(ZarrStream *stream)</argsstring>
        <name>ZarrStream_destroy</name>
        <param>
          <type>ZarrStream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Destroy a Zarr stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This function waits for all pending writes to complete and frees the memory allocated for the Zarr stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The Zarr stream struct to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="94" column="10" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="94" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="acquire_8zarr_8h_1addfed6ba57f30b1647b0309cdd977410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ZarrStatusCode</type>
        <definition>ZarrStatusCode ZarrStream_append</definition>
        <argsstring>(ZarrStream *stream, const void *data, size_t bytes_in, size_t *bytes_out)</argsstring>
        <name>ZarrStream_append</name>
        <param>
          <type>ZarrStream *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes_in</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes_out</declname>
        </param>
        <briefdescription>
<para>Append data to the Zarr stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will block while chunks are compressed and written to the store. It will return when all data has been written. Multiple frames can be appended in a single call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The Zarr stream struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bytes_in</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <computeroutput>data</computeroutput>. This can be any nonnegative integer. On a value of 0, this function will immediately return. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytes_out</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes written to the stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ZarrStatusCode_Success on success, or an error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" line="108" column="20" declfile="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h" declline="108" declcolumn="20"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;zarr.types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="struct_zarr_stream_settings" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ZarrStreamSettings_s</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27" refid="struct_zarr_stream_settings_1a4e324e448a455f2101d0095f1a31a59a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_zarr_stream_settings_1a4e324e448a455f2101d0095f1a31a59a" kindref="member">store_path</ref>;<sp/></highlight></codeline>
<codeline lineno="28" refid="struct_zarr_stream_settings_1a962048d5e554f874e67042fc087f71cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_zarr_stream_settings_1a962048d5e554f874e67042fc087f71cd" kindref="member">custom_metadata</ref>;<sp/></highlight></codeline>
<codeline lineno="29" refid="struct_zarr_stream_settings_1ae51f0e626a586e4566f537514f5a69d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_zarr_s3_settings" kindref="compound">ZarrS3Settings</ref>*<sp/><ref refid="struct_zarr_stream_settings_1ae51f0e626a586e4566f537514f5a69d5" kindref="member">s3_settings</ref>;<sp/></highlight></codeline>
<codeline lineno="30" refid="struct_zarr_stream_settings_1aff444bddee54703f21da778fb5a23961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_zarr_compression_settings" kindref="compound">ZarrCompressionSettings</ref>*<sp/><ref refid="struct_zarr_stream_settings_1aff444bddee54703f21da778fb5a23961" kindref="member">compression_settings</ref>;<sp/></highlight></codeline>
<codeline lineno="31" refid="struct_zarr_stream_settings_1a758d79c6a643e18ce367f8730816a361" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_zarr_dimension_properties" kindref="compound">ZarrDimensionProperties</ref>*<sp/><ref refid="struct_zarr_stream_settings_1a758d79c6a643e18ce367f8730816a361" kindref="member">dimensions</ref>;<sp/></highlight></codeline>
<codeline lineno="32" refid="struct_zarr_stream_settings_1ac580b9fe1cc14df115cb15aa48afebc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_zarr_stream_settings_1ac580b9fe1cc14df115cb15aa48afebc8" kindref="member">dimension_count</ref>;<sp/></highlight></codeline>
<codeline lineno="33" refid="struct_zarr_stream_settings_1a8db6ecec1db821fd1e50340d0efac730" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_zarr_stream_settings_1a8db6ecec1db821fd1e50340d0efac730" kindref="member">multiscale</ref>;<sp/></highlight></codeline>
<codeline lineno="34" refid="struct_zarr_stream_settings_1a5c6f0736461e9fec32154b113d22e1af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZarrDataType<sp/><ref refid="struct_zarr_stream_settings_1a5c6f0736461e9fec32154b113d22e1af" kindref="member">data_type</ref>;<sp/></highlight></codeline>
<codeline lineno="35" refid="struct_zarr_stream_settings_1ada644bd2cf3dcd6e19d6cadfceac94e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZarrVersion<sp/><ref refid="struct_zarr_stream_settings_1ada644bd2cf3dcd6e19d6cadfceac94e0" kindref="member">version</ref>;<sp/></highlight></codeline>
<codeline lineno="36" refid="struct_zarr_stream_settings_1aa4a974104042f5cc78b5ad01543fcbf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_zarr_stream_settings_1aa4a974104042f5cc78b5ad01543fcbf2" kindref="member">max_threads</ref>;<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ZarrStream_s<sp/>ZarrStream;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Zarr_get_api_version();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ZarrStatusCode<sp/>Zarr_set_log_level(ZarrLogLevel<sp/>level);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>ZarrLogLevel<sp/>Zarr_get_log_level();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Zarr_get_status_message(ZarrStatusCode<sp/>code);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ZarrStatusCode<sp/>ZarrStreamSettings_create_dimension_array(<ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref>*<sp/>settings,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimension_count);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ZarrStreamSettings_destroy_dimension_array(<ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref>*<sp/>settings);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ZarrStream*<sp/>ZarrStream_create(<ref refid="struct_zarr_stream_settings" kindref="compound">ZarrStreamSettings</ref>*<sp/>settings);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ZarrStream_destroy(ZarrStream*<sp/>stream);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>ZarrStatusCode<sp/>ZarrStream_append(ZarrStream*<sp/>stream,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_in,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bytes_out);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/mwebermendonca/acquire-zarr/include/acquire.zarr.h"/>
  </compounddef>
</doxygen>
